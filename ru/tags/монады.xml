<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>All your need is love and a little bit of LSD — tagged монады</title>
    <link href="https://ndtimofeev.github.io/ru/tags/%D0%BC%D0%BE%D0%BD%D0%B0%D0%B4%D1%8B.xml" rel="self" />
    <link href="https://ndtimofeev.github.io" />
    <id>https://ndtimofeev.github.io/ru/tags/%D0%BC%D0%BE%D0%BD%D0%B0%D0%B4%D1%8B.xml</id>
    <author>
        <name>Nikita Timofeev</name>
        <email>ndtimofeev@gmail.com</email>
    </author>
    <updated>2016-01-19T00:00:00Z</updated>
    <entry>
    <title>O Managed и MonadCatch или что делать если нельзя, но очень хочется…</title>
    <link href="https://ndtimofeev.github.io/ru/posts/2016-01-19-managed.html" />
    <id>https://ndtimofeev.github.io/ru/posts/2016-01-19-managed.html</id>
    <published>2016-01-19T00:00:00Z</published>
    <updated>2016-01-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Есть такой классный человек — <a href="http://www.haskellforall.com/">Gabriel Gonzalez</a>. Он делает с Haskell довольно классные и простые вещи. Зачастую ими совершенно никто не пользуется, но тем не менее они есть и на них стоит посмотреть хотя бы для того чтобы проникнуться и не делать из Хаскеля промышленную Яву. В частности именно он является автором пакета <a href="http://hackage.haskell.org/package/managed">managed</a>, который позволяет <del>экономить отступы</del> управлять ресурсами довольно своеобразным способом.</p>
<h2 id="что-такое-managed">Что такое Managed?</h2>
<p>Положим у есть файл. и нужно с ним сделать что-то хорошее. Файл надо открыть, получить его <code>Handle</code>, сделать с ним что-то и закрыть. Примерно так:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    hnd <span class="ot">&lt;-</span> openFile <span class="st">&quot;path/to/file&quot;</span> <span class="dt">ReadMode</span>
    hPutStrLn hnd <span class="st">&quot;\1051\1103\1093, \1080\1076\1080 \1085\1072 \1093\1091\1081&quot;</span>
    hClose hnd</code></pre></div>
<p>Что будет если попытаться записать что-то в файл открытый на чтение? Вылетит исключение и если его не поймать — тред упадёт. Если он главный и единственный можно заканчивать разговор. Если же есть друге треды то видимо где-то остался висеть открытый файл. Плохо. Хорошо, пишем так.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    hnd <span class="ot">&lt;-</span> openFile <span class="st">&quot;path/to/file&quot;</span> <span class="dt">ReadMode</span>
    hPutStrLn hnd <span class="st">&quot;\1051\1103\1093, \1080\1076\1080 \1085\1072 \1093\1091\1081&quot;</span> <span class="ot">`onException`</span> hClose hnd
    hClose hnd</code></pre></div>
<p>Уже лучше. Правда может прилететь асинхронное исключение из соседнего треда, которое может успеть помешать закрыть файл, но от него можно обезопасить себя при помощи mask. А можно обнаружить в стандартной библиотеке функцию <code>withFile</code>, которая всё это делает за вас примерно так.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    withFile <span class="st">&quot;path/to/file&quot;</span> <span class="dt">ReadMode</span> <span class="fu">$</span> \hnd <span class="ot">-&gt;</span> hPutStrLn hnd <span class="st">&quot;\1051\1103\1093, \1080\1076\1080 \1085\1072 \1093\1091\1081&quot;</span></code></pre></div>
<p>Всё прекрасно до тех пор пока нам не нужно записать содержимое одного файла в другой или даже записать содержимое двух файлов в один:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    withFile <span class="st">&quot;path/to/file&quot;</span> <span class="dt">ReadMode</span> <span class="fu">$</span> \hnd <span class="ot">-&gt;</span>
        withFile <span class="st">&quot;path/to/file1&quot;</span> <span class="dt">ReadMode</span> <span class="fu">$</span> \hnd1 <span class="ot">-&gt;</span>
            withFile <span class="st">&quot;path/to/file2&quot;</span> <span class="dt">ReadMode</span> <span class="fu">$</span> \hnd2 <span class="ot">-&gt;</span> <span class="kw">do</span>
                hGetContents hnd  <span class="fu">&gt;&gt;=</span> hPutStr hnd2
                hGetContents hnd1 <span class="fu">&gt;&gt;=</span> hPutStr hnd2</code></pre></div>
<p>Уже не так красиво. Хорошо, можно накидать волшебную стейт-монаду содержащую хэндлеры финализирующие действия аллоцирующие ресурсы.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    runMagicState <span class="fu">$</span> <span class="kw">do</span>
        hnd  <span class="ot">&lt;-</span> smartFileOpen <span class="st">&quot;path/to/file&quot;</span>  <span class="dt">ReadMode</span>
        hnd1 <span class="ot">&lt;-</span> smartFileOpen <span class="st">&quot;path/to/file1&quot;</span> <span class="dt">ReadMode</span>
        hnd2 <span class="ot">&lt;-</span> smartFileOpen <span class="st">&quot;path/to/file2&quot;</span> <span class="dt">ReadMode</span>
        liftIO <span class="fu">$</span> hGetContents hnd  <span class="fu">&gt;&gt;=</span> hPutStr hnd2
        liftIO <span class="fu">$</span> hGetContents hnd1 <span class="fu">&gt;&gt;=</span> hPutStr hnd2</code></pre></div>
<p>Можно сделать так чтобы смарт-конструкторы возвращали ещё и универсальный ключ, добавить подсчёт ссылок, передавать ресурсы между тредами, освобождать в рантайме и вообще сделать свой собственный <a href="http://hackage.haskell.org/package/resourcet">resourcet</a>. Правда придётся писать для всех ресурсов смарт-конструкторы регистрирующие финализаторы, которые можно использовать только с волшебной монадой, что немного расстраивает. А можно решить что во варианте с <code>withFile</code> итак всё было хорошо кроме способа соединения вычислений между собой и поискать тут монаду более хитрую монаду.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    <span class="kw">newtype</span> <span class="dt">Managed</span> a <span class="fu">=</span> <span class="dt">Managed</span> {<span class="ot"> with ::</span> forall r <span class="fu">.</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> r) <span class="ot">-&gt;</span> <span class="dt">IO</span> r }

    <span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Managed</span> <span class="kw">where</span>
        fmap f mx <span class="fu">=</span> <span class="dt">Managed</span> <span class="fu">$</span> \return_ <span class="ot">-&gt;</span>
            with mx <span class="fu">$</span> \x <span class="ot">-&gt;</span>
            return_ <span class="fu">$</span> f x

    <span class="kw">instance</span> <span class="dt">Applicative</span> <span class="dt">Managed</span> <span class="kw">where</span>
        pure r    <span class="fu">=</span> <span class="dt">Managed</span> <span class="fu">$</span> \return_ <span class="ot">-&gt;</span> return_ r

        mf <span class="fu">&lt;*&gt;</span> mx <span class="fu">=</span> <span class="dt">Managed</span> <span class="fu">$</span> \return_ <span class="ot">-&gt;</span>
            with mf <span class="fu">$</span> \f <span class="ot">-&gt;</span>
            with mx <span class="fu">$</span> \x <span class="ot">-&gt;</span>
            return_ <span class="fu">$</span> f x

    <span class="kw">instance</span> <span class="dt">Monad</span> <span class="dt">Managed</span> <span class="kw">where</span>
        return   <span class="fu">=</span> pure

        ma <span class="fu">&gt;&gt;=</span> f <span class="fu">=</span> <span class="dt">Managed</span> <span class="fu">$</span> \return_ <span class="ot">-&gt;</span>
            with ma <span class="fu">$</span> \a <span class="ot">-&gt;</span>
            with (f a) <span class="fu">$</span> \b <span class="ot">-&gt;</span>
            return_ b

    <span class="kw">instance</span> <span class="dt">MonadIO</span> <span class="dt">Managed</span> <span class="kw">where</span>
        liftIO m <span class="fu">=</span> <span class="dt">Managed</span> <span class="fu">$</span> \return_ <span class="ot">-&gt;</span> <span class="kw">do</span>
            v <span class="ot">&lt;-</span> m
            return_ v</code></pre></div>
<p>В принципе это примерно весь код, который необходим для работы <code>Managed</code>. Теперь можно писать код как-то так.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    with <span class="fu">$</span> <span class="kw">do</span>
        hnd  <span class="ot">&lt;-</span> <span class="dt">Managed</span> <span class="fu">$</span> withFile <span class="st">&quot;path/to/file&quot;</span> <span class="dt">ReadMode</span>
        hnd1 <span class="ot">&lt;-</span> <span class="dt">Managed</span> <span class="fu">$</span> withFile <span class="st">&quot;path/to/file1&quot;</span> <span class="dt">ReadMode</span>
        hnd2 <span class="ot">&lt;-</span> <span class="dt">Managed</span> <span class="fu">$</span> withFile <span class="st">&quot;path/to/file2&quot;</span> <span class="dt">ReadMode</span>
        liftIO <span class="fu">$</span> hGetContents hnd  <span class="fu">&gt;&gt;=</span> hPutStr hnd2
        liftIO <span class="fu">$</span> hGetContents hnd1 <span class="fu">&gt;&gt;=</span> hPutStr hnd2</code></pre></div>
<p>Плюсом данного подхода является использование готовых смарт-конструкторов, написанных автором библиотеки, отсутствие явного стейта, который можно было бы как-то хитро сломать и простота кода. Минусом скромность возможностей: нельзя передать ресурс во владение другому треду, нельзя запустить финализацию раньше времени<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>. Примерно как <a href="https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization">RAII</a> в C++.</p>
<h2 id="monadcatch-и-monadmask">MonadCatch и MonadMask</h2>
<p>Наступило счастье? Скорее всего нет. В реальной жизни почти всегда почему-то недостаточно дёрнуть финализатор перед смертью. Ситуаций где это достаточно и необходимо станет совсем не много. Если начать задумываться о том что в ходе выполнения программы возникают исключения, то почему-то сразу начинает требоваться ловить эти исключения и передавать в другой тред, откладывать исключения до момента пока не закончится вон та очень важная операция и многое другое, типа таймеров, юзер-интерапта и прочего <code>KillThread</code>. Также очень часто приходится работать не с одной монадой, а со стеком монадных трансформеров. Трансформер на вершине стека не зависит от конкретной монады нижнего уровня и опирается лишь на констрейнты, которыми он её ограничивает. Итого: нужно обрабатывать исключения в рамках <code>Managed</code>, а не только вызывать финализацию, нужны инстансы <code>MonadCatch</code> и <code>MonadMask</code> для <code>Managed</code>. А вот тут возникают проблемы.</p>
<ul>
<li><p>В числе законов <code>MonadCatch</code> указан только:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">catch (throwM e) f <span class="fu">=</span> f e</code></pre></div>
<p>который выполнить довольно легко, но если не обеспечить также поведение вида:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">catch (try meval) f <span class="fu">&gt;&gt;</span> throwM e <span class="fu">=</span> throwM e</code></pre></div>
<p>то скорее всего люди столкнувшись с таким <code>catch</code>’ем будут озадачены настолько что отрубят автору такого инстанса руки. Но для <code>Managed</code> следующее связанное выражение выполняется не после текущего, а внутри. Так что если обернуть его целиком в <code>catch</code>, то мы заодно обернём в <code>catch</code> и все последующие связанные выражения в этой монаде и получится что-то вроде такого поведения.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">catch (try meval) f <span class="fu">&gt;&gt;</span> throwM e <span class="fu">=</span> f e</code></pre></div></li>
<li><p>Если оборачивать в <code>catch</code> <code>Managed</code>-выражение, должны быть перехвачены исключение возникшие только до следующего связывания или в финализаторе тоже?</p></li>
</ul>
<p>Можно попытаться вспомнить что <code>Managed</code>, это в теории такой специализированный вид монады <code>ContT</code> из <a href="http://hackage.haskell.org/package/transformers">transfomers</a>, а в <a href="http://hackage.haskell.org/package/exceptions">exceptions</a> есть необходимые инстансы для стандартных монад. Но если посмотреть туда, станет понятно что <code>ContT</code> чуть ли не единственная монада оттуда для которой Эдвард Кметт не придумал <code>MonadCatch</code> и <code>MonadMask</code>. В общем случае решить эти вопросы довольно трудно, традиционно принято их не решать вообще и пользоваться либо <a href="http://hackage.haskell.org/package/managed">managed</a>, либо <a href="http://hackage.haskell.org/package/exceptions">exceptions</a>.</p>
<h2 id="костыли">Костыли</h2>
<p>Что делать если очень хочется? Для начала попробуем себя уговорить, что проблемы нет. Начнём со второго вопроса. Итак, по сути каждое вычисление в <code>Managed</code> состоит из самого «вычисления» и некоего «финализатора», который выполнится после того как выполнятся все связанные вычисления.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    <span class="dt">Managed</span> <span class="fu">$</span> \следующее <span class="ot">-&gt;</span> вычисление <span class="fu">&gt;&gt;=</span> следующее <span class="fu">&gt;&gt;</span> финализатор</code></pre></div>
<p>Традиционный <code>withSome</code> выглядит примерно так:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    withSome eval <span class="fu">=</span> bracket
        resourceInitialize
        (\resource <span class="ot">-&gt;</span> finalize resource)
        (\resource <span class="ot">-&gt;</span> eval resource)</code></pre></div>
<p>При таком подходе финализация вообще замаскирована от любых исключений. Даже если он реализован иначе, то всё же стоит думать что автор не дурак и написал смарт-конструктор с безопасным финализатором, раз уж решено пользоваться им. Потому что если это не так, то вместо него стоило бы написать свой. Таким образом исключения могут возникнуть только внутри «вычисления».</p>
<p>Хорошо. Как в таком случае обернуть в <code>catch</code> только половину функции, которая соответствует только нашему «вычислению»? Наверное никак. Но вместо этого мы можем попробовать инвалидировать финализатор.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="ot">{-# LANGUAGE Rank2Types #-}</span>

<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Control.Exception</span> ( allowInterrupt )
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.IORef</span>
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Catch</span>
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Managed</span></code></pre></div>
<p>Чтобы быть <code>MonadCatch</code>, надо сначала стать <code>MonadThrow</code>. Но тут всё очевидно.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">instance</span> <span class="dt">MonadThrow</span> <span class="dt">Managed</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     throwM <span class="fu">=</span> liftIO <span class="fu">.</span> throwM</code></pre></div>
<p>Затем изобразим функцию <code>catch</code> для типов, которые скрывает <code>Managed</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> managedCatch ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> ((a <span class="ot">-&gt;</span> <span class="dt">IO</span> r) <span class="ot">-&gt;</span> <span class="dt">IO</span> r) <span class="ot">-&gt;</span> (e <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> r) <span class="ot">-&gt;</span> <span class="dt">IO</span> r) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">IO</span> r) <span class="ot">-&gt;</span> <span class="dt">IO</span> r
<span class="fu">&gt;</span> managedCatch eval handler next <span class="fu">=</span> <span class="kw">do</span>
<span class="fu">&gt;</span>     ref <span class="ot">&lt;-</span> newIORef handler
<span class="fu">&gt;</span>     <span class="kw">let</span> handler&#39; e n <span class="fu">=</span> readIORef ref <span class="fu">&gt;&gt;=</span> \h <span class="ot">-&gt;</span> h e n
<span class="fu">&gt;</span>     catch (eval (\v <span class="ot">-&gt;</span> mask_ (writeIORef ref (\e _ <span class="ot">-&gt;</span> throwM e)) <span class="fu">&gt;&gt;</span> next v)) (\e <span class="ot">-&gt;</span> handler&#39; e next)</code></pre></div>
<p>Ну и сам инстанс будет выглядеть как-то так:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">instance</span> <span class="dt">MonadCatch</span> <span class="dt">Managed</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     catch eval handler <span class="fu">=</span> managed <span class="fu">$</span> managedCatch (with eval) (with <span class="fu">.</span> handler)</code></pre></div>
<p>Всё. Можно перехватывать и обрабатывать исключения. У этого подхода есть как минимум следующие недостатки:</p>
<ul>
<li>Нужна целая одна переменная. Кметту можно даже не пытаться показывать — проклянёт.</li>
<li>Всё вычисления от момента использования <code>catch</code> и до последнего связанного выражения на самом деле завёрнуто в <code>catch</code>, а если их несколько штук к ряду то на самом деле это матрёшка. И тут возникает нюанс: я точно не знаю как устроена обработка исключений в ghc, но все известные мне реализации <code>catch</code> подразумевают если и не копирование всего стека перед вхождением <code>catch</code>, то хотя бы его заморозку. Иначе не получится вернутся к состоянию стека до вызова <code>catch</code>. В общем случае это значит, что часть объектов на стеке будут удерживаться даже если бы в любом другом случае их собрал gc. Здесь же это удерживание будет продолжаться дольше чем надо вплоть до самого конца региона. Это проблема. Но с другой стороны это проблема не только данного решения, но и функций <code>withSomeThing</code> вообще так что хрен с ним.</li>
<li>Если асинхронное исключение прилетит после того после того как завершилось «вычисление», но до того как отработает маскировка, будет вызван оригинальный обработчик исключения, который сделает что-то. Беда-огорчение.</li>
</ul>
<p>Этот уровень можно считать условно пройденным. Дальше <code>MonadMask</code> и с ним всё хуже.</p>
<p>Попробуем понять, что должна делать и чего делать не должна функция <code>mask</code> для <code>Managed</code>. Видимо исходя из предположения в начале она должна маскировать «вычисление» и не маскировать «финализатор». Почему нужно не маскировать «финализатор»?</p>
<ul>
<li>Чтобы создать гомогенность поведения и не порождать неожиданных эффектов в конце выполняемого блока <code>catch</code> не ловит исключения в «финализаторе», а <code>mask</code> не маскирует «финализатор».</li>
<li>Для безопасности. Мы снова возвращаемся к тому вопросу, что «финализатор» написан человеком, который представляет себе как надо выделять и освобождать ресурс. Вероятнее всего он уже замаскирован, но если это не так, то для этого скорее всего были веские причины.</li>
</ul>
<p>Проблема в том, что <code>mask</code> маскирует функцию, а с точки зрения кода «вычисление» и «финализатор» это одна функция и замаскировать её мы можем только целиком. Хорошо, расчехляем <code>allowInterrupt</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> managedMask ::</span> ((forall b<span class="fu">.</span> <span class="dt">Managed</span> b <span class="ot">-&gt;</span> <span class="dt">Managed</span> b) <span class="ot">-&gt;</span> <span class="dt">Managed</span> a) <span class="ot">-&gt;</span> <span class="dt">Managed</span> a
<span class="fu">&gt;</span> managedMask eval <span class="fu">=</span>
<span class="fu">&gt;</span>     managed <span class="fu">$</span> \next <span class="ot">-&gt;</span>
<span class="fu">&gt;</span>         mask <span class="fu">$</span> \unmask <span class="ot">-&gt;</span>
<span class="fu">&gt;</span>             with (eval <span class="fu">$</span> managedRestore unmask) <span class="fu">$</span> \resource <span class="ot">-&gt;</span> <span class="kw">do</span>
<span class="fu">&gt;</span>                 v <span class="ot">&lt;-</span> unmask (next resource)
<span class="fu">&gt;</span>                 allowInterrupt
<span class="fu">&gt;</span>                 return v

<span class="fu">&gt;</span><span class="ot"> managedRestore ::</span> (forall a<span class="fu">.</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">Managed</span> b <span class="ot">-&gt;</span> <span class="dt">Managed</span> b
<span class="fu">&gt;</span> managedRestore oldRestore eval <span class="fu">=</span> managed <span class="fu">$</span> \next <span class="ot">-&gt;</span> oldRestore <span class="fu">$</span> with eval next</code></pre></div>
<p>Всё? Нет. Нужен ещё <code>uninterruptibleMask</code>. Он понятное дело выглядит абсолютно аналогично предыдущему коду, но есть одно но: <code>allowInterrupt</code> не производит никакого эффекта будучи вызванным из <code>uninterruptibleMask</code>. Другого способа размаскировать «финализатор» я не знаю и если по какой-то причине он зависнет то это уже навсегда. Кроме того это создаёт ощутимую разницу с <code>mask</code> в поведении. Что делать?</p>
<ul>
<li>Гомогенезировать поведение. Разрешить <code>mask</code> маскировать «финализатор», a <code>catch</code> ловить исключения в финализаторе. Это не сложно, но я уверен что это не совсем то поведение, которое хотелось бы видеть.</li>
<li>Пойти на сомнительную сделку с собственной совестью и решить что <code>uninterruptibleMask</code> всё равно никто толком не использует примерно никогда, а если и использует то на коротких, гарантированно завершающихся функциях, у которых почти наверняка нет «финализатора».</li>
<li>Страдать и признать поражение и страдать.</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">instance</span> <span class="dt">MonadMask</span> <span class="dt">Managed</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     mask                <span class="fu">=</span> managedMask
<span class="fu">&gt;</span>     uninterruptibleMask <span class="fu">=</span>
<span class="fu">&gt;</span>         \eval <span class="ot">-&gt;</span> managed <span class="fu">$</span> \next <span class="ot">-&gt;</span>
<span class="fu">&gt;</span>             uninterruptibleMask <span class="fu">$</span> \unmask <span class="ot">-&gt;</span>
<span class="fu">&gt;</span>                 with (eval <span class="fu">$</span> managedRestore unmask) <span class="fu">$</span> (unmask <span class="fu">.</span> next)</code></pre></div>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Также важным недостатком данной схемы является то что можно вернуть ресурс из блока кода после того как отработали все финализаторы и он в лучшем случае больше недоступен. Но во-первых насколько я понимаю эта проблема характерна и для resourcet-подобных решений, во-вторых это совсем другая долгая и печальная история.<a href="#fnref1">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>
<entry>
    <title>О скоупах</title>
    <link href="https://ndtimofeev.github.io/ru/posts/2015-08-02-scope.html" />
    <id>https://ndtimofeev.github.io/ru/posts/2015-08-02-scope.html</id>
    <published>2015-08-02T00:00:00Z</published>
    <updated>2015-08-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>А вот ещё одна хитрая задачка. Положим у нас есть несколько устройств, которые мы можем как-то дёргать через <code>DevHnd a</code> (где <code>a</code> — тип-параметр характеризующий устройство). Проблема в том, что если два треда будут рулить устройством одновременно, то результат будет трудно предсказать. Хорошо, вводим концепцию владения устройством: управлять устройством<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> можно только завладев им, если кто-то другой завладел устройством до тебя, то ты ждёшь пока устройство освободится. Просто, но есть пара нюансов:</p>
<ul>
<li>мы говорим «блокировка» и подразумеваем «дедлок», поскольку в реальной жизни тред должен контролировать состояние более одного устройства одновременно;</li>
<li>из типа <code>DevHnd a</code> никак не следует захвачен ли он текущим тредом, а значит проверка этого факта будет осуществляться в рантайме каждый раз когда мы будем модифицировать устройство и более того время от времени мы будем сталкиваться с ошибками времени исполнения.</li>
</ul>
<p>В общем случае, когда устройства захватываются и высвобождаются в произвольный момент времени ни первую, ни вторую проблему мы вероятнее всего не решим. Но если рассмотреть ситуацию когда все устройства захватываются и освобождаются одновременно ситуация перестаёт быть такой удручающей и внезапно укладывается в традиционный для haskell’я паттерн:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">    withSomething ::</span> <span class="dt">DevHnd</span> a <span class="ot">-&gt;</span> <span class="dt">DevHnd</span> b <span class="ot">-&gt;</span> <span class="dt">IO</span> c <span class="ot">-&gt;</span> <span class="dt">IO</span> c
    withSomething dev1 dev2 action <span class="fu">=</span> <span class="kw">do</span>
        alloc dev1 dev2
        v <span class="ot">&lt;-</span> action
        dealloc dev1 dev2
        return v</code></pre></div>
<p>Способов заблокировать несколько сущностей одновременно избежав дедлоков более одного, выберите по вкусу. Но <code>action</code> всё равно может содержать действия с устройствами, которые мы не захватили. Чтобы этого избежать можно сделать следующее:</p>
<ul>
<li>введём изоморфный <code>DevHnd a</code> тип <code>StaticHnd s a</code> с фантомным параметром <code>s</code> и приватную функцию <code>toStatic</code> делающую из первого второе;</li>
<li>введём изоморфную <code>IO a</code> монаду <code>Scope a</code>, а также функции для управления устройствами внутри этой монады через <code>StaticHnd s a</code>;</li>
<li>перепишем предыдущий код так:</li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">    withSomething ::</span> <span class="dt">DevHnd</span> a <span class="ot">-&gt;</span> <span class="dt">DevHnd</span> b <span class="ot">-&gt;</span> (forall s<span class="fu">.</span> <span class="dt">StaticHnd</span> s a <span class="ot">-&gt;</span> forall s<span class="fu">.</span> <span class="dt">StaticHnd</span> s b <span class="ot">-&gt;</span> <span class="dt">Scope</span> c) <span class="ot">-&gt;</span> <span class="dt">IO</span> c
    withSomething dev1 dev2 action <span class="fu">=</span> <span class="kw">do</span>
        alloc dev1 dev2
        v <span class="ot">&lt;-</span> action (toStatic dev1) (toStatic dev2)
        dealloc dev1 dev2
        return v</code></pre></div>
<p>Всё. Теперь следим за руками:</p>
<ul>
<li>изменять в нашем скоупе устройства через <code>DevHnd a</code> мы не можем, поскольку соответствующий мутатор не определён для <code>Scope a</code>;</li>
<li>создать <code>StaticHnd s a</code> мы можем только при помощи <code>withSomething</code>, поскольку <code>toStatic</code> не экспортирован наружу;</li>
<li>вернуть <code>StaticHnd s a</code> из <code>action</code> мы тоже не можем, поскольку функция не может вернуть значение любого типа, а фантомный параметр <code>s</code> передаваемых в неё аргументов объявлен как <code>forall</code>.</li>
</ul>
<p>Из всего этого следует что любая попытка использовать внутри нашего скоупа не захваченное устройство или устройство захваченное в другой скоуп (кроме родительского :^)) завершится <strong>ошибкой компиляции</strong>. Хорошо? Очень хорошо. Но на этом хорошее заканчивается и начинается Real World.</p>
<p>Приведённый код определён для двух устройств захватываемых в скоуп. Очевидным образом это довольно частный случай и этого мало. Также очевидно что функция <code>withSomething</code> содержит детали приватной реализации и должна быть чёрным ящиком. Есть несколько вариантов решения:</p>
<ul>
<li><p>Наиболее распространённым решением таких проблем в haskell’е это… унылая копипаста в результате которой получатся функции вида:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">withSomething ::</span> <span class="dt">DevHnd</span> a <span class="ot">-&gt;</span> (forall s<span class="fu">.</span> <span class="dt">StaticHnd</span> s a <span class="ot">-&gt;</span> <span class="dt">Scope</span> c) <span class="ot">-&gt;</span> <span class="dt">IO</span> c

<span class="ot">withSomething2 ::</span> <span class="dt">DevHnd</span> a <span class="ot">-&gt;</span> <span class="dt">DevHnd</span> b <span class="ot">-&gt;</span> (forall s<span class="fu">.</span> <span class="dt">StaticHnd</span> s a <span class="ot">-&gt;</span> forall s<span class="fu">.</span> <span class="dt">StaticHnd</span> s b <span class="ot">-&gt;</span> <span class="dt">Scope</span> c) <span class="ot">-&gt;</span> <span class="dt">IO</span> c

<span class="ot">withSomething3 ::</span> <span class="dt">DevHnd</span> a <span class="ot">-&gt;</span> <span class="dt">DevHnd</span> b <span class="ot">-&gt;</span> <span class="dt">DevHnd</span> c <span class="ot">-&gt;</span>
    (forall s<span class="fu">.</span> <span class="dt">StaticHnd</span> s a <span class="ot">-&gt;</span> forall s<span class="fu">.</span> <span class="dt">StaticHnd</span> s b <span class="ot">-&gt;</span> forall s<span class="fu">.</span> <span class="dt">StaticHnd</span> s c <span class="ot">-&gt;</span> <span class="dt">Scope</span> d) <span class="ot">-&gt;</span> <span class="dt">IO</span> d</code></pre></div>
<p>И так до тех пор пока не надоест.</p></li>
<li><p>Также можно попробовать изобразить композицию.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">action <span class="fu">=</span>
    withSomething hnd1 <span class="fu">$</span> \sHnd1 <span class="ot">-&gt;</span>
        withSomething hnd2 <span class="fu">$</span> \sHnd2 <span class="ot">-&gt;</span>
            withSomething hnd3 <span class="fu">$</span> \sHnd3 <span class="ot">-&gt;</span> <span class="kw">do</span>
                doSomething sHnd1
                doSomething sHnd2
                doSomething sHnd3</code></pre></div>
<p>Но так мы теряем возможность захватывать устройства одной транзакцией (у каждого <code>withSomething</code> своя транзакция). В принципе это можно пофиксить введя ещё одну стадию заправки ракеты:</p>
<ul>
<li>вводим ещё одну монаду<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> (например Accure a) внутри которой можно делать только withSomething и run;</li>
<li>withSomething просто добавляет захват очередного устройства в готовящуюся транзакцию;</li>
<li>run запускает транзакцию и затем выполняет наш Scope.</li>
</ul></li>
</ul>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">    action <span class="fu">=</span> accure <span class="fu">$</span>
        withSomething hnd1 <span class="fu">$</span> \sHnd1 <span class="ot">-&gt;</span>
            withSomething hnd2 <span class="fu">$</span> \sHnd2 <span class="ot">-&gt;</span>
                withSomething hnd3 <span class="fu">$</span> \sHnd3 <span class="ot">-&gt;</span> run <span class="fu">$</span> <span class="kw">do</span>
                    doSomething sHnd1
                    doSomething sHnd2
                    doSomething sHnd3</code></pre></div>
<ul>
<li><p>Наконец есть магия в стиле <code>Applicative</code> позволяющая писать что-то в духе:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(\v1 <span class="ot">-&gt;</span> … ) <span class="fu">&lt;$&gt;</span> doSome1
(\v1 v2 <span class="ot">-&gt;</span> … ) <span class="fu">&lt;$&gt;</span> doSome1 <span class="fu">&lt;*&gt;</span> doSome2
(\v1 v2 v3 <span class="ot">-&gt;</span> … ) <span class="fu">&lt;$&gt;</span> doSome1 <span class="fu">&lt;*&gt;</span> doSome2 <span class="fu">&lt;*&gt;</span> doSome3</code></pre></div>
<p>Я даже видел как что-то подобное использовали в parsec’е, но от попыток натянуть это на свои типы у меня стабильно плавится мозг.</p></li>
</ul>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>В данном случае это не так принципиально, но под управлением устройством разумеется подразумевается изменение его состояния.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>Если у вас монада головного мозга конечно. Достаточно моноида, же.<a href="#fnref2">↩</a></p></li>
</ol>
</div>]]></summary>
</entry>

</feed>
